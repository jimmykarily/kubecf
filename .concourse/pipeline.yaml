resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

- name: concourse-git-queue
  type: docker-image
  source:
    repository: splatform/concourse-git-queue

resources:
- name: commit-to-test
  type: concourse-git-queue
  source:
    bucket: kubecf-ci
    bucket_subfolder: build-queue
    aws_access_key_id: ((aws-access-key))
    aws_secret_access_key: ((aws-secret-key))
    access_token: ((github-access-token))

- name: kubecf-master
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/kubecf

- name: kubecf-pr
  type: pull-request
  check_every: 10m
  source:
    repository: cloudfoundry-incubator/kubecf
    access_token: ((github-access-token))
    disable_forks: true # Trigger on kubecf branches only

- name: kubecf-fork-pr
  type: pull-request
  check_every: 10m
  source:
    repository: cloudfoundry-incubator/kubecf
    access_token: ((github-access-token))
    disable_forks: false # Trigger on kubecf branches only

- name: catapult
  type: git
  source:
    uri: https://github.com/SUSE/catapult
  version:
    ref: 543bc71abc8bd22e5ef81fdf94a7afeb2f99066d

- name: s3.kubecf-ci
  type: s3
  source:
    bucket: kubecf-ci
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: eu-central-1
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-ci-bundle
  type: s3
  source:
    bucket: kubecf-ci
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: eu-central-1
    regexp: kubecf-bundle-v(.*).tgz

- name: s3.kubecf
  type: s3
  source:
    bucket: kubecf
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: us-west-2
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-bundle
  type: s3
  source:
    bucket: kubecf
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: us-west-2
    regexp: kubecf-bundle-v(.*).tgz

deploy_args: &deploy_args
- -xce
- |
  export SCF_LOCAL="${PWD}/commit-to-test"
  export SCF_CHART="$(readlink -f s3.kubecf-ci/*.tgz)"
  export SCF_OPERATOR=true
  export FORCE_DELETE=true
  export HELM_VERSION="v3.1.1"
  export SCF_TESTGROUP=true
  export BACKEND=ekcp
  export DOCKER_ORG=cap-staging
  export QUIET_OUTPUT=true
  export CLUSTER_NAME="${CLUSTER_NAME_PREFIX}-$(ls commit-to-test/*.json | \
                       xargs basename | sed 's/.json$//g' | cut -c1-18)"
  pushd catapult
  # Bring up a k8s cluster and builds+deploy kubecf
  # https://github.com/SUSE/catapult/wiki/Build-and-run-SCF#build-and-run-kubecf
  make k8s scf

test_args: &test_args
- -xce
- |
  export BACKEND=ekcp
  export KUBECF_TEST_SUITE="${TEST_SUITE:-smokes}"
  export SCF_LOCAL="${PWD}/commit-to-test"
  export KUBECF_NAMESPACE="scf"
  export QUIET_OUTPUT=true
  export CLUSTER_NAME="${CLUSTER_NAME_PREFIX}-$(ls commit-to-test/*.json | \
                       xargs basename | sed 's/.json$//g' | cut -c1-18)"
  export KUBECF_CHECKOUT="${PWD}/commit-to-test"
  pushd catapult
  # Grabs back a deployed cluster and runs test suites on it
  # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
  make recover tests-kubecf

rotate_args: &rotate_args
- -xce
- |
  export BACKEND=ekcp
  export KUBECF_NAMESPACE="scf"
  export CLUSTER_NAME="${CLUSTER_NAME_PREFIX}-$(ls commit-to-test/*.json | \
                       xargs basename | sed 's/.json$//g' | cut -c1-18)"
  export KUBECF_CHECKOUT="${PWD}/commit-to-test"
  export KUBECF_INSTALL_NAME="susecf-scf"

  pushd catapult
  make recover
  source build*/.envrc

  pushd "${KUBECF_CHECKOUT}"
  testing/ccdb_key_rotation/rotate-ccdb-keys-test.sh

jobs:
- name: queue-pr
  public: true
  plan:
  - get: kubecf-pr
    params:
      integration_tool: checkout
    trigger: true
    version: "every"
  # Use GitHub API to find the remote repository of the PR (it may be a fork)
  # The pr resource doesn't provide this information.
  - task: find-pr-remote
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf-pr
      outputs:
      - name: output
      params:
        GITHUB_ACCESS_TOKEN: ((github-access-token))
        REPO: "cloudfoundry-incubator/kubecf"
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          curl -s -L -X GET "https://api.github.com/repos/${REPO}/pulls/$(cat kubecf-pr/.git/resource/pr)" | \
            jq -r .head.repo.full_name > output/remote
  - put: commit-to-test
    params: &commit-status
      commit_path: "kubecf-pr/.git/resource/head_sha"
      remote_path: "output/remote"
      description: "Queued"
      state: "pending"
      contexts: >
        lint,build,deploy-diego,smoke-diego,rotate-diego,smoke-rotated-diego,
        acceptance-diego,deploy-eirini,smoke-eirini,rotate-eirini,brain-eirini,
        smoke-rotated-eirini,acceptance-eirini,sync-integration-tests-diego,brain-tests-diego
      trigger: "PR"
      metadata_path: "kubecf-pr/.git/resource/url"
- name: queue-fork-pr
  public: true
  plan:
  - get: kubecf-fork-pr
    params:
      integration_tool: checkout
    trigger: false
  # Use GitHub API to find the remote repository of the PR (it may be a fork)
  # The pr resource doesn't provide this information.
  - task: find-pr-remote
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf-fork-pr
      outputs:
      - name: output
      params:
        GITHUB_ACCESS_TOKEN: ((github-access-token))
        REPO: "cloudfoundry-incubator/kubecf"
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          curl -s -L -X GET "https://api.github.com/repos/${REPO}/pulls/$(cat kubecf-fork-pr/.git/resource/pr)" | \
            jq -r .head.repo.full_name > output/remote
  - put: commit-to-test
    params:
      <<: *commit-status
      commit_path: "kubecf-fork-pr/.git/resource/head_sha"
      remote_path: "output/remote"
      remote: ""
      description: "Queued"
      state: "pending"
      trigger: "PR"
      metadata_path: "kubecf-fork-pr/.git/resource/url"
- name: queue-master
  public: true
  plan:
  - get: kubecf-master
    params:
      integration_tool: checkout
    trigger: true
  - put: commit-to-test
    params:
      <<: *commit-status
      commit_path: "kubecf-master/.git/ref"
      remote: "cloudfoundry-incubator/kubecf"
      remote_path: ""
      description: "Queued"
      state: "pending"
      trigger: "master"
      metadata_path: ""
- name: lint
  public: true
  plan:
  - get: commit-to-test
    trigger: true
    version: "every"
  - task: lint
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: commit-to-test
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          cd commit-to-test
          ./dev/linters/shellcheck.sh
          ./dev/linters/yamllint.sh
          ./dev/linters/helmlint.sh
    on_success:
      put: commit-to-test
      params:
        description: "Lint was successful"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
        state: "success"
        contexts: "lint"
    on_failure:
      put: commit-to-test
      params:
        description: "Lint failed"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
        state: "failure"
        contexts: "lint"
- name: build
  public: false # TODO: public or not?
  plan:
  - get: commit-to-test
    trigger: true
    version: "every"
    passed:
    - lint
  - task: build
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: commit-to-test
      outputs:
      - name: output
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          cd commit-to-test
          ./dev/build.sh ../output
    on_success:
      put: commit-to-test
      params:
        description: "Build was successful"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
        state: "success"
        contexts: "build"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Build failed"
          state: "failure"
          contexts: "build"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
  - put: s3.kubecf-ci
    params:
      file: output/kubecf-v*.tgz
      acl: public-read
  - put: s3.kubecf-ci-bundle
    params:
      file: output/kubecf-bundle-v*.tgz
      acl: public-read

- name: deploy-diego
  max_in_flight: 2
  public: true
  plan:
  - get: commit-to-test
    trigger: true
    version: "every"
    passed:
    - build
  - get: s3.kubecf-ci
    passed:
    - build
  - get: s3.kubecf-ci-bundle
    passed:
    - build
  - get: catapult
  - task: deploy
    privileged: true
    timeout: 2h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: commit-to-test
      - name: catapult
      - name: s3.kubecf-ci
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        QUIET_OUTPUT: true
        ENABLE_EIRINI: false
        CLUSTER_NAME_PREFIX: kubecf-diego
      run:
        path: "/bin/bash"
        args: *deploy_args
    on_success:
      put: commit-to-test
      params:
        description: "Deploying with Diego was successful"
        state: "success"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
        contexts: "deploy-diego"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Deploying with Diego failed"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          state: "failure"
          contexts: "deploy-diego"
      - task: cleanup-cluster
        config: &cleanup-cluster
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: commit-to-test
          params:
            EKCP_HOST: ((ekcp-host))
            CLUSTER_NAME_PREFIX: "kubecf-diego"
          run:
            path: "/bin/bash"
            args:
            - -ce
            - |
              export CLUSTER_NAME="${CLUSTER_NAME_PREFIX}-$(ls commit-to-test/*.json | \
                                   xargs basename | sed 's/.json$//g' | cut -c1-18)"
              curl -X DELETE -s "http://${EKCP_HOST}/${CLUSTER_NAME}" | jq -r .Output
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-diego"
          EKCP_HOST: ((ekcp-host))

- name: smoke-tests-diego
  public: true
  plan:
  - get: commit-to-test
    passed:
    - deploy-diego
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - deploy-diego
  - get: s3.kubecf-ci-bundle
    passed:
    - deploy-diego
  - get: catapult
  - task: test-diego
    privileged: true
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME_PREFIX: kubecf-diego
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: commit-to-test
      params:
        description: "Smoke tests on Diego were successful"
        state: "success"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
        contexts: "smoke-diego"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Smoke tests on Diego failed"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          state: "failure"
          contexts: "smoke-diego"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-diego"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-diego"
          EKCP_HOST: ((ekcp-host))

- name: ccdb-rotate-diego
  public: true
  plan:
  - get: commit-to-test
    passed:
    - cf-acceptance-tests-diego
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - cf-acceptance-tests-diego
  - get: s3.kubecf-ci-bundle
    passed:
    - cf-acceptance-tests-diego
  - get: catapult
  - task: rotate-diego
    privileged: true
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        CLUSTER_NAME_PREFIX: kubecf-diego
      run:
        path: "/bin/bash"
        args: *rotate_args
    on_success:
      put: commit-to-test
      params:
        description: "Rotating secrets on Diego was successful"
        state: "success"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
        contexts: "rotate-diego"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Rotating secrets on Diego failed"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          state: "failure"
          contexts: "rotate-diego"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-diego"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-diego"
          EKCP_HOST: ((ekcp-host))

- name: smoke-tests-post-rotate-diego
  public: true
  plan:
  - get: commit-to-test
    passed:
    - ccdb-rotate-diego
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - ccdb-rotate-diego
  - get: s3.kubecf-ci-bundle
    passed:
    - ccdb-rotate-diego
  - get: catapult
  - task: test-diego
    privileged: true
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME_PREFIX: kubecf-diego
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: commit-to-test
      params:
        description: "Smoke tests on Diego after rotating secrets was successful"
        state: "success"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
        contexts: "smoke-rotated-diego"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Smoke tests on Diego after rotating secrets failed"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          state: "failure"
          contexts: "smoke-rotated-diego"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-diego"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-diego"
          EKCP_HOST: ((ekcp-host))

- name: sync-integration-tests-diego
  public: true
  plan:
  - get: commit-to-test
    passed:
    - smoke-tests-diego
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - smoke-tests-diego
  - get: s3.kubecf-ci-bundle
    passed:
    - smoke-tests-diego
  - get: catapult
  - task: test-diego
    privileged: true
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: sits
        CLUSTER_NAME_PREFIX: kubecf-diego
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: commit-to-test
      params:
        description: "Sync Integration tests on Diego succeeded"
        state: "success"
        contexts: "sync-integration-tests-diego"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Sync Integration tests on Diego failed"
          state: "failure"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          contexts: "sync-integration-tests-diego"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-diego"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-diego"
          EKCP_HOST: ((ekcp-host))

# TODO: re-enable once BRAIN tests are fixed.
# - name: brain-tests-diego
#   public: true
#   plan:
#   - get: commit-to-test
#     passed:
#     - sync-integration-tests-diego
#     trigger: true
#     version: "every"
#   - get: s3.kubecf-ci
#     passed:
#     - sync-integration-tests-diego
#   - get: s3.kubecf-ci-bundle
#     passed:
#     - sync-integration-tests-diego
#   - get: catapult
#   - task: test-diego
#     privileged: true
#     timeout: 1h30m
#     config:
#       platform: linux
#       image_resource:
#         type: registry-image
#         source:
#           repository: splatform/catapult
#       inputs:
#       - name: catapult
#       - name: commit-to-test
#       outputs:
#       - name: output
#       params:
#         DEFAULT_STACK: cflinuxfs3
#         EKCP_HOST: ((ekcp-host))
#         TEST_SUITE: brain
#         CLUSTER_NAME_PREFIX: kubecf-diego
#       run:
#         path: "/bin/bash"
#         args: *test_args
#     on_success:
#       put: commit-to-test
#       params:
#         description: "Brain tests on Diego succeeded"
#         state: "success"
#         contexts: "brain-tests-diego"
#         commit_path: "commit-to-test/.git/resource/ref"
#         version_path: "commit-to-test/.git/resource/version"
#     on_failure:
#       do:
#       - put: commit-to-test
#         params:
#           description: "Brain tests on Diego failed"
#           state: "failure"
#           commit_path: "commit-to-test/.git/resource/ref"
#           version_path: "commit-to-test/.git/resource/version"
#           contexts: "brain-tests-diego"
#       - task: cleanup-cluster
#         config:
#           <<: *cleanup-cluster
#           params:
#             CLUSTER_NAME_PREFIX: "kubecf-diego"
#             EKCP_HOST: ((ekcp-host))
#     on_abort:
#       task: cleanup-cluster
#       config:
#         <<: *cleanup-cluster
#         params:
#           CLUSTER_NAME_PREFIX: "kubecf-diego"
#           EKCP_HOST: ((ekcp-host))

- name: cf-acceptance-tests-diego
  public: true
  plan:
  - get: commit-to-test
    passed:
    - sync-integration-tests-diego
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - sync-integration-tests-diego
  - get: s3.kubecf-ci-bundle
    passed:
    - sync-integration-tests-diego
  - get: catapult
  - task: test-diego
    privileged: true
    timeout: 5h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: cats
        CLUSTER_NAME_PREFIX: kubecf-diego
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: commit-to-test
      params:
        description: "Acceptance tests on Diego succeeded"
        state: "success"
        contexts: "acceptance-diego"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Acceptance tests on Diego failed"
          state: "failure"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          contexts: "acceptance-diego"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-diego"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-diego"
          EKCP_HOST: ((ekcp-host))

- name: cleanup-diego-cluster
  public: true
  plan:
  - get: commit-to-test
    passed:
    - smoke-tests-post-rotate-diego
    trigger: true
    version: "every"
  - task: cleanup-cluster
    config:
      <<: *cleanup-cluster
      params:
        CLUSTER_NAME_PREFIX: "kubecf-diego"
        EKCP_HOST: ((ekcp-host))

# Eirini
- name: deploy-eirini
  max_in_flight: 2
  public: true
  plan:
  - get: commit-to-test
    trigger: true
    version: "every"
    passed:
    - build
  - get: s3.kubecf-ci
    passed:
    - build
  - get: s3.kubecf-ci-bundle
    passed:
    - build
  - get: catapult
  - task: deploy
    timeout: 2h30m
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: commit-to-test
      - name: catapult
      - name: s3.kubecf-ci
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        ENABLE_EIRINI: true
        CLUSTER_NAME_PREFIX: kubecf-eirini
      run:
        path: "/bin/bash"
        args: *deploy_args
    on_success:
      put: commit-to-test
      params:
        description: "Deploying Eirini succeeded"
        state: "success"
        contexts: "deploy-eirini"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Deploying Eirini failed"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          state: "failure"
          contexts: "deploy-eirini"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-eirini"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-eirini"
          EKCP_HOST: ((ekcp-host))

- name: smoke-tests-eirini
  public: true
  plan:
  - get: commit-to-test
    passed:
    - deploy-eirini
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - deploy-eirini
  - get: s3.kubecf-ci-bundle
    passed:
    - deploy-eirini
  - get: catapult
  - task: test
    privileged: true
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: mail-output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME_PREFIX: kubecf-eirini
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: commit-to-test
      params:
        description: "Smoke tests on Eirini succeeded"
        state: "success"
        contexts: "smoke-eirini"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Smoke tests on Eirini failed"
          state: "failure"
          contexts: "smoke-eirini"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-eirini"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-eirini"
          EKCP_HOST: ((ekcp-host))

# TODO: re-enable once BRAIN tests are fixed.
# - name: brain-tests-eirini
#   public: true
#   plan:
#   - get: commit-to-test
#     passed:
#     - smoke-tests-eirini
#     trigger: true
#     version: "every"
#   - get: s3.kubecf-ci
#     passed:
#     - smoke-tests-eirini
#   - get: s3.kubecf-ci-bundle
#     passed:
#     - smoke-tests-eirini
#   - get: catapult
#   - task: test
#     privileged: true
#     timeout: 1h30m
#     config:
#       platform: linux
#       image_resource:
#         type: registry-image
#         source:
#           repository: splatform/catapult
#       inputs:
#       - name: catapult
#       - name: commit-to-test
#       outputs:
#       - name: mail-output
#       params:
#         DEFAULT_STACK: cflinuxfs3
#         EKCP_HOST: ((ekcp-host))
#         TEST_SUITE: brain
#         CLUSTER_NAME_PREFIX: kubecf-eirini
#       run:
#         path: "/bin/bash"
#         args: *test_args
#     on_success:
#       put: commit-to-test
#       params:
#         description: "Brain tests on Eirini succeeded"
#         state: "success"
#         contexts: "brain-eirini"
#         commit_path: "commit-to-test/.git/resource/ref"
#         version_path: "commit-to-test/.git/resource/version"
#     on_failure:
#       do:
#       - put: commit-to-test
#         params:
#           description: "Brain tests on Eirini failed"
#           state: "failure"
#           contexts: "brain-eirini"
#           commit_path: "commit-to-test/.git/resource/ref"
#           version_path: "commit-to-test/.git/resource/version"
#       - task: cleanup-cluster
#         config:
#           <<: *cleanup-cluster
#           params:
#             CLUSTER_NAME_PREFIX: "kubecf-eirini"
#             EKCP_HOST: ((ekcp-host))
#     on_abort:
#       task: cleanup-cluster
#       config:
#         <<: *cleanup-cluster
#         params:
#           CLUSTER_NAME_PREFIX: "kubecf-eirini"
#           EKCP_HOST: ((ekcp-host))

- name: ccdb-rotate-eirini
  public: true
  plan:
  - get: commit-to-test
    passed:
    - cf-acceptance-tests-eirini
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - cf-acceptance-tests-eirini
  - get: s3.kubecf-ci-bundle
    passed:
    - cf-acceptance-tests-eirini
  - get: catapult
  - task: rotate-eirini
    privileged: true
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        CLUSTER_NAME_PREFIX: kubecf-eirini
      run:
        path: "/bin/bash"
        args: *rotate_args
    on_success:
      put: commit-to-test
      params:
        description: "Rotating secrets on Eirini succeeded"
        state: "success"
        contexts: "rotate-eirini"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Rotating secrets on Eirini failed"
          state: "failure"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          contexts: "rotate-eirini"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-eirini"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-eirini"
          EKCP_HOST: ((ekcp-host))

- name: smoke-tests-post-rotate-eirini
  public: true
  plan:
  - get: commit-to-test
    passed:
    - ccdb-rotate-eirini
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - ccdb-rotate-eirini
  - get: s3.kubecf-ci-bundle
    passed:
    - ccdb-rotate-eirini
  - get: catapult
  - task: test
    privileged: true
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: mail-output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME_PREFIX: kubecf-eirini
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: commit-to-test
      params:
        description: "Smoke tests after rotating secrets on Eirini succeeded"
        state: "success"
        contexts: "smoke-rotated-eirini"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Smoke tests after rotating secrets on Eirini failed"
          state: "failure"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          contexts: "smoke-rotated-eirini"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-eirini"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-eirini"
          EKCP_HOST: ((ekcp-host))

- name: cf-acceptance-tests-eirini
  public: true
  plan:
  - get: commit-to-test
    passed:
    - smoke-tests-eirini
    # trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - smoke-tests-eirini
  - get: s3.kubecf-ci-bundle
    passed:
    - smoke-tests-eirini
  - get: catapult
  - task: test
    timeout: 5h30m
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: commit-to-test
      outputs:
      - name: mail-output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: cats
        CLUSTER_NAME_PREFIX: kubecf-eirini
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: commit-to-test
      params:
        description: "Acceptance tests on Eirini succeeded"
        state: "success"
        contexts: "acceptance-eirini"
        commit_path: "commit-to-test/.git/resource/ref"
        version_path: "commit-to-test/.git/resource/version"
    on_failure:
      do:
      - put: commit-to-test
        params:
          description: "Acceptance tests on Eirini failed"
          state: "failure"
          commit_path: "commit-to-test/.git/resource/ref"
          version_path: "commit-to-test/.git/resource/version"
          contexts: "acceptance-eirini"
      - task: cleanup-cluster
        config:
          <<: *cleanup-cluster
          params:
            CLUSTER_NAME_PREFIX: "kubecf-eirini"
            EKCP_HOST: ((ekcp-host))
    on_abort:
      task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-eirini"
          EKCP_HOST: ((ekcp-host))

- name: cleanup-eirini-cluster
  public: true
  plan:
  - get: commit-to-test
    passed:
    # - smoke-tests-post-rotate-eirini
    - smoke-tests-eirini
    trigger: true
    version: "every"
  - task: cleanup-cluster
    config:
      <<: *cleanup-cluster
      params:
        CLUSTER_NAME_PREFIX: "kubecf-eirini"
        EKCP_HOST: ((ekcp-host))

- name: publish
  public: true
  plan:
  - get: commit-to-test
    passed:
    - cf-acceptance-tests-diego
    # TODO: Uncomment as soon as eirini tests are green
    # TODO: Does this work? It might check the wrong thing
    # - cf-acceptance-tests-eirini
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - cf-acceptance-tests-diego
  - get: s3.kubecf-ci-bundle
    passed:
    - cf-acceptance-tests-diego
  - task: check-if-build-is-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: commit-to-test
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          if [ "$(cat commit-to-test/*-*.json | jq -r .trigger)" == "master" ]; then
            echo "It was a master branch build, we will publish the artifact."
            exit 0
          else
            echo "It was not a master build, we will not publish the artifact."
            exit 1
          fi
    on_success:
      do:
      - put: s3.kubecf
        params:
          file: s3.kubecf-ci/kubecf-v*.tgz
      - put: s3.kubecf-bundle
        params:
          file: s3.kubecf-ci-bundle/kubecf-bundle-v*.tgz
